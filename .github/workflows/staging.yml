name: Staging

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [staging]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
#2
env:
  REGISTRY: 'registry.digitalocean.com/wikiblock'
  IMAGE_NAME: 'wikiblock-cronjob-staging'
  APP_ENV: 'staging'
  MODE: 'development'
  GITHUB_SHA: ${{ $GITHUB_SHA}}

#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: yarn install  --pure-lockfile
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.GITHUB_SHA}}

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build_and_push
  #   environment: staging

  #   steps:
  #     - name: Deploy to Digital Ocean droplet via SSH action
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.DIGITALOCEAN_CRAWLER_HOST }}
  #         username: ${{ secrets.DIGITALOCEAN_USERNAME }}
  #         key: ${{ secrets.DIGITALOCEAN_SECRET_SSH_KEY }}
  #         passphrase: ${{ secrets.DIGITALOCEAN_PASSPHRASE }}
  #         envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA,{{secrets.SECRETS}}
  #         script: |
  #           # Login to registry
  #           docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
  #           # Stop running container
  #           docker stop $(echo $IMAGE_NAME)
  #           # Remove old container
  #           docker rm $(echo $IMAGE_NAME) -f
  #           docker container prune
  #           docker image prune -a -f --filter "until=24h"
  #           # Run a new container from a new image
  #           docker run -d \
  #           -p 127.0.0.1:9002:9002 \
  #           --restart always \
  #           -v /var/run/docker.sock:/var/run/docker.sock \
  #           --memory-swappiness=100 \
  #           --cpus=4 \
  #           --cpu-shares=4096 \
  #           --name $(echo $IMAGE_NAME) \
  #           $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
